#+title: Towers of Hanoi
#+options: toc:nil
#+property: header-args:emacs-lisp :tangle tower-of-hanoi.el
#+property: header-args:C :tangle tower-of-hanoi.c
#+author: 8dcc

* Emacs lisp

See SICP lectures by Harold Abelson and Gerald Jay Sussman, 1986. [[https://youtu.be/V_7mmwpgJHU?si=taZcChDFRIyKGzLe&t=2843][Link]].

#+begin_src emacs-lisp :results output
(defun print-items (lst)
  (dolist (e lst)
    (princ e)))

(defun move-stack (num from to aux)
  (when (> num 0)
    (move-stack (- num 1) from aux to)
    (print-items (list "Moving from " from " to " to "\n"))
    (move-stack (- num 1) aux to from)))

(move-stack 4 'A 'B 'C)
#+end_src

#+RESULTS:
#+begin_example
Moving from A to C
Moving from A to B
Moving from C to B
Moving from A to C
Moving from B to A
Moving from B to C
Moving from A to C
Moving from A to B
Moving from C to B
Moving from C to A
Moving from B to A
Moving from C to B
Moving from A to C
Moving from A to B
Moving from C to B
#+end_example

* Recursive C function

#+begin_src C :results output
#include <stdio.h>

void move_stack(int num, char from, char to, char aux) {
    if (num <= 0)
        return;

    move_stack(num - 1, from, aux, to);
    printf("Moving from %c to %c\n", from, to);
    move_stack(num - 1, aux, to, from);
}

int main(void) {
    move_stack(4, 'A', 'B', 'C');
    return 0;
}
#+end_src

#+RESULTS:
#+begin_example
Moving from A to C
Moving from A to B
Moving from C to B
Moving from A to C
Moving from B to A
Moving from B to C
Moving from A to C
Moving from A to B
Moving from C to B
Moving from C to A
Moving from B to A
Moving from C to B
Moving from A to C
Moving from A to B
Moving from C to B
#+end_example
