#+title: Summation
#+options: toc:nil
#+property: header-args:emacs-lisp :tangle summation.el :exports both
#+property: header-args:C :tangle summation.c :exports both
#+author: 8dcc

* Emacs lisp

Function that calculates

$$
\sum_{i=a}^{b} f(i)
$$

With a given =a=, =b= and =f=.

Note that because emacs lisp uses different namespaces for variables and
functions, we can't just use =(f a)=. We need to call the function with
=(funcall f a)=, which is equivalent to =(apply f (a))=.

#+begin_src emacs-lisp
(defun summation (a b f)
  (if (> a b)
      0
    (+ (funcall f a)
       (summation (+ a 1) b f))))

(list (summation 1 5 (lambda (x) x))
      (summation 1 5 (lambda (x) (expt 2 x))))
#+end_src

#+RESULTS:
| 15 | 62 |

The problem with this function is that it's recursive and it could be done in an
iterative way, with $O(1)$ space complexity.

#+begin_src emacs-lisp
(defun summation (a b f)
  (defun iter (i total)
    (if (> i b)
        total
      (iter (+ i 1)
            (+ total (funcall f i)))))
  (iter a 0))

(list (summation 1 5 (lambda (x) x))
      (summation 1 5 (lambda (x) (expt 2 x))))
#+end_src

#+RESULTS:
| 15 | 62 |

For more information, see [[https://web.mit.edu/6.001/6.037/sicp.pdf#subsection.1.2.1][section 1.2.1 of SICP]].

* C

#+begin_src C :results output
#include <stdio.h>

typedef int (*FuncPtr)(int x);

int summation(int a, int b, FuncPtr f) {
    int ret = 0;

    for (; a <= b; a++)
        ret += f(a);

    return ret;
}

int echo(int x) {
    return x;
}

int pow2(int x) {
    return (1 << x); /* (2 ^ x) */
}

int main(void) {
    printf("%d, ", summation(1, 5, echo));
    printf("%d\n", summation(1, 5, pow2));
}
#+end_src

#+RESULTS:
: 15, 62
