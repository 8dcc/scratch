#+TITLE: Even Fibonacci Numbers
#+AUTHOR: 8dcc
#+OPTIONS: toc:2
#+STARTUP: nofold
#+PROPERTY: header-args:C      :tangle even-fibonacci.c :flags -std=c99 -Wall -Wextra -Wpedantic
#+PROPERTY: header-args:scheme :tangle even-fibonacci.scm

* Problem

Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

\begin{equation*}
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \dots
\end{equation*}

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.

* C code

#+begin_src C
#include <stdbool.h>
#include <stdio.h>

#define FIB_LIMIT 4000000

static inline bool is_even(unsigned int x) {
    /* Check if the lowest bit is set */
    return (x & 1) == 0;
}

int main(void) {
    int result = 0;

    unsigned int cur_fib = 1, last_fib = 1;
    while (cur_fib < FIB_LIMIT) {
        if (is_even(cur_fib))
            result += cur_fib;

        int aux = last_fib;
        last_fib = cur_fib;
        cur_fib += aux;
   }

    printf("Result: %d\n", result);

    return 0;
}
#+end_src

#+RESULTS:
: Result: 4613732

* Scheme code

#+begin_src scheme
(define (calculate limit)
  (define (do-calculation cur-fib prev-fib limit)
    (cond ((>= cur-fib limit)
           0)
          ((even? cur-fib)
           (+ cur-fib
              (do-calculation (+ cur-fib prev-fib) cur-fib limit)))
          (else
           (do-calculation (+ cur-fib prev-fib) cur-fib limit))))
  (do-calculation 1 1 limit))

(calculate 4000000)
#+end_src

#+RESULTS:
: 4613732
